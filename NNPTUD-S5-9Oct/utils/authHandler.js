let { Response } = require("./responseHandler");
let jwt = require("jsonwebtoken");
let users = require("../schemas/users");

module.exports = {
  // üß© Ki·ªÉm tra x√°c th·ª±c
  Authentication: async function (req, res, next) {
    try {
      // L·∫•y token t·ª´ header ho·∫∑c cookie
      let token = req.headers.authorization?.startsWith("Bearer")
        ? req.headers.authorization.split(" ")[1]
        : req.cookies?.token;

      if (!token) {
        return Response(res, 403, false, "User ch∆∞a ƒëƒÉng nh·∫≠p");
      }

      // X√°c minh token h·ª£p l·ªá
      const decoded = jwt.verify(token, "NNPTUD");

      if (!decoded || !decoded._id) {
        return Response(res, 403, false, "Token kh√¥ng h·ª£p l·ªá");
      }

      // G·∫Øn userId v√†o request
      req.userId = decoded._id;
      next();
    } catch (error) {
      return Response(
        res,
        403,
        false,
        "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n ho·∫∑c token kh√¥ng h·ª£p l·ªá"
      );
    }
  },

  // üß± Ki·ªÉm tra quy·ªÅn h·∫°n
  Authorization: function (...rolesRequired) {
    return async function (req, res, next) {
      try {
        const user = await users.findById(req.userId).populate({
          path: "role",
          select: "name",
        });

        if (!user || !user.role) {
          return Response(
            res,
            403,
            false,
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng"
          );
        }

        const userRole = user.role.name.toUpperCase();

        if (rolesRequired.includes(userRole)) {
          next();
        } else {
          Response(res, 403, false, "B·∫°n kh√¥ng ƒë·ªß quy·ªÅn truy c·∫≠p");
        }
      } catch (error) {
        Response(res, 500, false, "L·ªói x√°c th·ª±c quy·ªÅn truy c·∫≠p");
      }
    };
  },
};
